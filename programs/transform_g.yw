func malloc(size: Int) -> Void* #foreign;
func `free`(pointer: Void*) #foreign;
func printf(format: String, arg: Float, ...) #foreign;

struct Node<Value> {
    next: Node<Value>*;
    value: Value;
}

func transform<F, T>(value: F) -> T {
    return (cast(T) value);
}

func list_transform<F, T>(head: Node<F>*) -> Node<T>* {
    new_head := new Node<T>;
    new_head.value = transform<F, T>(head.value);

    new_last := new_head;
    current := head;
    
    while (current.next != null) {
        next := new Node<T>;
        next.value = transform<F, T>(current.next.value);
        new_last.next = next;
        new_last = next;

        current = current.next;
    }
    return new_head;
}

func list_print(head: Node<Float>*) {
    useSeparator := false;
    current := head;
    while (current != null) {
        if (useSeparator) {
            printf(", ", 0.0);
        }
        printf("%1.1f", current.value);
        current = current.next;
        useSeparator = true;
    }
    printf("\n", 0.0);
}

func list_append(head: Node<Int>*, value: Int) {
    node := new Node<Int>;
    node.value = value;

    current := head;
    while (current.next != null) {
        current = current.next;
    }
    current.next = node;
}

func list_get_value_at<A>(head: Node<A>*, index: Int) -> A* { // value: nullable
    if (index == 0) {
        return &head.value;
    }

    current := head.next;
    i := 0;

    while (current != null) {
        i = i + 1;
        if (index == i) {
            break;
        }
        current = current.next;
    }

    if (index > i) {
        return null;
    }
    
    return &current.value;
}

func main() -> Int {
    int_list : Node<Int>* = new Node<Int>;
    list_append(int_list, 0);
    list_append(int_list, 1);
    list_append(int_list, 2);
    list_append(int_list, 3);
    list_append(int_list, 4);

    float_list : Node<Float>* = list_transform<Int, Float>(int_list);

    if (*list_get_value_at<Float>(float_list, 0) != 0) { return 1; }
    if (*list_get_value_at<Float>(float_list, 1) != 1) { return 2; }
    if (*list_get_value_at<Float>(float_list, 2) != 2) { return 3; }
    if (*list_get_value_at<Float>(float_list, 3) != 3) { return 4; }
    if (*list_get_value_at<Float>(float_list, 4) != 4) { return 5; }

    printf("Generic Transform: OK\n", 0.0);

    // this is failing because of some Float stuff

    return 0;
}