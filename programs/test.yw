func malloc(size: Int) -> Void* #foreign;
func `free`(pointer: Void*) #foreign;
func printf(format: String, arguments: Int, ...) #foreign;

struct Pair<Left, Right> {
    left: Left;
    right: Right;
}

struct Node<Value> {
    next: Node<Value>*;
    value: Value;
}

func list_append_pair<Left, Right>(head: Node<Pair<Left, Right>>*, left: Left, right: Right) -> Node<Pair<Left, Right>>* {
    pair: Pair<Left, Right>;
    node := new Node<Pair<Left, Right>>;
    node.value = pair;

    node.value.left = left;
    node.value.right = right;

    current := head;
    while (current.next != null) {
        current = current.next;
    }
    current.next = node;
    return node;
}

func main(count: Int, arguments: Int8**) -> Int {

    head := new Node<Pair<Int, Int>>;

    list_append_pair<Int, Int>(head, 0, 2);
    second := head.next;
    printf("second value is lhs: %d rhs: %d\n", second.value.left, second.value.right);

    list_append_pair<Int, Int>(head, -1, 1);
    third := second.next;
    printf("third value is lhs: %d rhs: %d\n", third.value.left, third.value.right);

    return 0;
}