func malloc(size: Int) -> Void* #foreign;
func `free`(pointer: Void*) #foreign;
func printf(format: String, arguments: Int, ...) #foreign;

// func print(format: String, arguments: Any) { }

struct Node<Value> {
    next: Node<Value>*;
    value: Value;
}

func int_list_print(head: Node<Int>) {
    useSeparator := false;
    current := &head;
    while (current != null) {
        if (useSeparator) {
            printf(", ", 0);
        }
        printf("%d", current.value);
        current = current.next;
        useSeparator = true;
    }
    printf("\n", 0);
}

func list_append<Value>(head: Node<Value>*, value: Value) {
    node := new Node<Value>;
    node.value = value;

    current := head;
    while (current.next != null) {
        current = current.next;
    }
    current.next = node;
}

func list_removing_element_at<T>(head: Node<T>*, index: Int) -> Node<T>* { // new head
    if (index == 0) {
        free head;
        return head.next;
    }

    previous := head;
    i := 0;

    while (previous.next != null) {
        i = i + 1;
        if (index == i) { 
            break;
        }
        previous = previous.next;
    }

    if (index > i) {
        return head;
    }

    current := previous.next;
    next := current.next;
    previous.next = next;

    free current;
    return head;
}

func list_get_value_at<A>(head: Node<A>*, index: Int) -> A* { // value: nullable
    if (index == 0) {
        return &head.value;
    }

    current := head.next;
    i := 0;

    while (current != null) {
        i = i + 1;
        if (index == i) {
            break;
        }
        current = current.next;
    }

    if (index > i) {
        return null;
    }
    
    return &current.value;
}

func main(count: Int, arguments: Int8**) -> Int {

    printf("List: ", 0);
    head := new Node<Int>;
    head.value = 0;

    list_append<Int>(head, 1);
    list_append<Int>(head, 2);
    list_append<Int>(head, 3);
    list_append<Int>(head, 4);
    list_append<Int>(head, 5);

    head = list_removing_element_at<Int>(head, 5);
    head = list_removing_element_at<Int>(head, 3);
    head = list_removing_element_at<Int>(head, 0);
    head = list_removing_element_at<Int>(head, 9);

    if (*list_get_value_at<Int>(head, 0) != 1) { return 1; }
    if (*list_get_value_at<Int>(head, 1) != 2) { return 2; }
    if (*list_get_value_at<Int>(head, 2) != 4) { return 3; }

    printf("OK\n", 0);
    return 0;
}
