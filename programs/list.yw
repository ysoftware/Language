func printf(format: String, arguments: Int32, ...) #foreign;

struct Node {
    nextNode: Node*;
    value: Int;
}

struct List {
    firstNode: Node*;
    lastNode: Node*;
    count: Int;
}

// @Todo
// getting pointer of element
// null literal
// pointer comparison
// pointer as boolean expression (null checking)
// member access of a pointer

func printList(list: List*) -> Node* {
    printf("List. Count: %d\n", list.count);
    node := list.firstNode;
    index := 0;
    while (node.nextNode != null) {
        printf("  %d: %d\n", index, node.value);
        node = node.nextNode;
        index = index + 1;
    }
    return node;
}

func append(list: List*, value: Int) {
    node: Node;
    node.value = value;

    if (list.count > 0) {
        list.lastNode.nextNode = node;
        list.lastNode = node;
    }
    else {
        list.firstNode = node*;
        list.lastNode = node*;
    }

    list.count = list.count + 1;
}

func main(count: Int, arguments: Int8**) -> Int {
    list: List;
    append(list*, 1);
    return 0;
}
