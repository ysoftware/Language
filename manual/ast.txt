NOTES

1. No polymorphism
2. No procedure overloading

------------
CODE

    func printf(_ format: String, _ arguments: Int32...) -> Int32 #foreign

    func main() -> Int32 {

        a : Int : 3                     // let a: Int = 3
        b : Int = 1                     // var b: Int = 1
        b = a + b                       // b = a + b

        printf("%d\n", b)               // print("\(b)\n")
        return 0
    }

------------
AST

global scope:

    string_literal:
        id: "global_string_literal_1"
        value: "%d\0A\0"

    import_procedure:
        id: "global_func_prinf"
        name: "printf"
        returns: "Int32"
        arguments: [

            argument:
                label: "_"
                name: "format"
                type: "String"
                vararg: false

            argument:
                label: "_"
                name: "arguments"
                type: "Any"
                vararg: true
        ]

    procedure:
        id: "global_func_main"
        name: "main"
        arguments: []
        returns: "Int32"
        code: [

            new_int_64:
                id: "global_func_main_variable_a"
                constant: true
                value: 3

            new_int_64:
                id: "global_func_main_variable_b"
                constant: false
                value: 1

            set_expression_int_64:
                variable: "global_func_main_variable_b"
                expression: 

                    procedure_call:
                        name: "add_int64"
                        arguments: ["global_func_main_variable_a", "global_func_main_variable_b"]
            
            procedure_call:
                name: "global_func_prinf"
                arguments: ["global_string_literal_1", "global_func_main_variable_b"]

            return_int64:
                value: 0
        ]
