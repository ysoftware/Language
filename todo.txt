LEXER TODO

✅ escaping quotes in strings
✅ add EOF token

-- properly eat whitespaces
-- hex/bin numbers

PARSER TODO

✅ procedure head            func printf(format: String, arguments: Int32, ...) -> Void #foreign
✅ procedure body            return
✅ procedure call            a = printf(format: a, arguments: b, a);
✅ variable declaration      a := 1; a : Int = 1;
✅ constant declaration      a :: 1; a : Int : 1;
✅ struct declaration        struct Name {  }
✅ type inference 1st pass   a = proc_a();
✅ if else
✅ while loop
✅ break, continue
✅ binary operators          a+b; a-b; a/b; a*a;
✅ unary operators           -a; ~a; !a; *a; (B)a ; ^a;
✅ variable assignment       a = b;

-- constant expressions
-- variable assignment as binary operation
-- switch
-- array literal             a : Int[3] = [1]; a := (Float[3])[1]
-- tuple literal             a : (Int, String) = (1, "a"); 
-- struct instance literal   x := Struct { a = 1, b = 2 }; // all unspecified are left as default
-- type inference 2nd pass

-- add scope to Ast (to ident debug output)
-- add cursor to Ast (for 2nd pass error messaging)

IR Gen TODO

✅ structures
-- arrays


BUGS

// endless loop: if (pointer != null) {  printf("%d\n", pointerToInt(pointer))); }