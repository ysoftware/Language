TODO

READ
- https://habr.com/ru/company/otus/blog/442554/

FEATURE
- generic procedures 
- this should work: obj := new Int; &obj = 1;
- proper variadic procedures [different types of arguments / empty variadic arguments]
- defer
- arrays
- subscript access

IRGEN
- autoinclude malloc/free (make imports?)
- move sizeof to a global value
- move string literal to a global value (from Parser responsibility to IRGen) to match sizeof
- make IRGen throw errors

PARSER
- unit test generic structs usage
- unit tests scope ids (comparison)
- unit test error cursors
- verify all paths of a procedure return a value
- write tests for equality methods?
- deal with decl ids:
    - procedure arguments maybe to have procedure_id in them?

LEXER
- rework error messages and cursors
- properly eat whitespaces
- proc call doesn't fail without semicolon at the end

BUGS
- code with just "1" outputs 0 statements and isn't failing
- func main() { a := (1 + 3) * (1 + 7 / -(5 + 3)) % 100 - 0.5; } // should resolve to float (because of 0.5)

OPTIMIZATION
- don't load the same value argument if passed twice in call expr, like a = add(a, a)
- dereference all arguments passed by value in call expr (for now, doing that manually) 
- struct A<T> { a: A<A>; } // should fail as A is not supplied with a generic argument @SecondPass