WORKING ON

TODO
- generic procedure parsing tests
- #method() procedure directive
    func list_append<Value>(head: Node<Value, Value) -> Node<Value> #method(Node<T>.append) { ... } 
        head: new Node<Int>;  head = head.adding(1).adding(2);
        parsed to: assign head = [call list_append([call list_append(head, 1)], 2)]
    func integer_sum(lhs: Int, rhs: Int) -> Int #method(Int.adding) { ... }
        val := 1.adding(1).adding(2).adding(5);
        parsed to: vDecl val = [call integer_sum([call integer_sum([call integer_sum(1), 1)], 2)], 5)]

READ
- https://habr.com/ru/company/otus/blog/442554/

FEATURE
- array and subscript access
- proper variadic procedures [different types of arguments / empty variadic arguments]
- defer

PROBABLY NEVER
- warnings (for unused structs and procedures)
- generic type member access resolution at the point of solidifying // func has_next<T>(nextable: T) -> Bool { return nextable.next != nil; }

IRGEN
- implement #main (with zeroinitialized arguments)
- autoinclude malloc/free (make imports?)
- move sizeof to a global value
- move string literal to a global value (from Parser responsibility to IRGen) to match sizeof

PARSER
- Floating point constants (https://llvm.org/docs/LangRef.html#simple-constants)
- unit test generic procedures
    - all generic types are used in procedure arguments
- unit tests scope ids (comparison)
- unit test error cursors
- verify all paths of a procedure return a value
- write tests for equality methods?

LEXER
- rework error messages and cursors
- properly eat whitespaces
- proc call doesn't fail without semicolon at the end

BUGS
- while (i < 100000) { // do we not have a less than?
- A<Void>; should be an error?
- this should work: obj := new Int; &obj = 1; 
- code with just "1" outputs 0 statements and isn't failing
- func main() { a := (1 + 3) * (1 + 7 / -(5 + 3)) % 100 - 0.5; } // should resolve to float (because of 0.5)
- head := new Node<Pair<Int, Int>>; list_append_pair<Int, Float>(head, 3, 134); // type checking doesn't catch this
- [Call] list_append_pair->Void ([Value <l1_head>] head: Node<Pair<Int32, Int8>>*, [Int32 0], [Int32 42]) // Int literal is not converted to Int8 in a generic call

OPTIMIZATION
- don't load the same value argument if passed twice in call expr, like a = add(a, a)
- dereference all arguments passed by value in call expr (for now, doing that manually) 
- struct A<T> { a: A<A>; } // should fail as A is not supplied with a generic argument @SecondPass